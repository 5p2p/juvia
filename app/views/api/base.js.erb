var Juvia = {
	loadScriptCounter: 0
};

(function(Juvia) {
	<%= File.read("#{Rails.root}/public/javascripts/jquery-1.6.2.min.js").html_safe %>
	var $ = jQuery.noConflict();
	var RawDeflate;
	<%= File.read("#{Rails.root}/public/javascripts/jquery.delayed-observer.js").html_safe %>
	<%= File.read("#{Rails.root}/public/javascripts/jquery.example.min.js").html_safe %>
	<%= File.read("#{Rails.root}/public/javascripts/rawdeflate.js").html_safe %>
	<%= File.read("#{Rails.root}/public/javascripts/base64.js").html_safe %>
	
	Juvia.reinstallBehavior = function() {
		var self = this;
		
		if (!$(document.body).hasClass('juvia-installed-behavior')) {
			$(document.body).addClass('juvia-installed-behavior');
			$(document.body).bind('mousedown touchdown', function(event) {
				if (!$(event.target).hasClass('.juvia-help-content')
				 && $(event.target).closest('.juvia-help-content').length == 0) {
					$('.juvia-help-content').hide();
				}
			});
		}
		
		$('.juvia-container:not(.juvia-installed-behavior)').each(function() {
			var $this = $(this);
			$this.addClass('juvia-installed-behavior');
			
			var addCommentForm = $('.juvia-add-comment-form', this);
			
			$('input[name=author_name]', addCommentForm).example('Your name (optional)',
				{ className: 'juvia-example-text' });
			$('input[name=author_email]', addCommentForm).example('Your email (optional)',
				{ className: 'juvia-example-text' });
			
			// Must be bound after setting input examples because we
			// want jquery.example to clear example texts before we
			// query those fields' values.
			addCommentForm.submit(self.submitComment);
			
			$('.juvia-help', this).bind('click', function() {
				var $this = $(this);
				var content = $this.parent().find('.juvia-help-content');
				var offset = $this.position();
				content.css({
					left: offset.left + 'px',
					top: (offset.top + $this.outerHeight() + 8) + 'px'
				});
				content.show();
			});
			
			var textarea = $('.juvia-textarea-field textarea', addCommentForm);
			$('textarea').delayedObserver(function() {
				self.previewComment(this);
			});
			
			var errorDiv = $('.juvia-form-actions .juvia-error', addCommentForm);
			addCommentForm.bind('reset', function() {
				errorDiv.hide();
				// Repopulate example texts in input fields.
				setTimeout(function() {
					$('input', addCommentForm).blur();
				}, 1);
			});
		});
	}
	
	Juvia.findContainer = function(options) {
		return $('.juvia-container[data-site-key="' +
			options.site_key +
			'"][data-topic-key="' +
			options.topic_key +
			'"]');
	}
	
	Juvia.showFormError = function(container, message) {
		var div = $('.juvia-form-actions .juvia-error', container);
		if (message == undefined || message == null || message == '') {
			div.hide();
		} else {
			div.text(message).show();
		}
	}
	
	Juvia.loadScript = function(path, options) {
		var url = '<%= escape_javascript(request.protocol + request.host_with_port) %>';
		url += path;
		
		// Make sure that each loadScript() call generates a unique URL,
		// otherwise the browser may not actually perform the request.
		url += '?_c=' + this.loadScriptCounter;
		this.loadScriptCounter++;
		
		for (var name in options) {
			url += '&';
			url += encodeURIComponent(name);
			url += '=';
			url += encodeURIComponent(options[name]);
		}
		
		$('script.juvia').remove();
		
		var s       = document.createElement('script');
		s.async     = true;
		s.type      = 'text/javascript';
		s.className = 'juvia';
		s.src       = url;
		(document.getElementsByTagName('head')[0] ||
		 document.getElementsByTagName('body')[0]).appendChild(s);
	}
	
	Juvia.handleResponse = function(response) {
		this['handle' + response.action](response);
		this.reinstallBehavior();
	}
	
	Juvia.handleLoadTopic = function(options) {
		var $container = $(options.container);
		$container.html(options.html);
		if (options.css) {
			var style = document.createElement('style');
			var rules = document.createTextNode(options.css);
			style.type = 'text/css';
			if (style.styleSheet) {
				style.styleSheet.cssText = rules.nodeValue;
			} else {
				style.appendChild(rules);
			}
			$(style).appendTo($container);
		}
	}
	
	Juvia.handleAddComment = function(options) {
		var container = this.findContainer(options);
		var element = $(options.html);
		element.prependTo(container.find('.juvia-comments'));
		container.find('form')[0].reset();
		this.smoothlyScrollTo(element.offset().top - 20);
		element.hide().fadeIn(2000);
	}
	
	Juvia.handlePreviewComment = function(options) {
		var container = this.findContainer(options);
		var preview = $('.juvia-preview', container);
		this.showFormError(container, undefined);
		if (options.html.length == 0) {
			preview.find('.juvia-preview-empty').show();
			preview.find('.juvia-preview-content').hide();
		} else {
			preview.find('.juvia-preview-empty').hide();
			preview.find('.juvia-preview-content').html(options.html).show();
		}
	}
	
	Juvia.handleShowFormError = function(options) {
		var container = this.findContainer(options);
		this.showFormError(container, options.text);
	}
	
	Juvia.submitComment = function(event) {
		var form = event.target;
		var $container = $(form).closest('.juvia-container');
		this.loadScript('/api/add_comment', {
			site_key    : $container.data('site-key'),
			topic_key   : $container.data('topic-key'),
			topic_title : $container.data('topic-title'),
			topic_url   : $container.data('topic-url'),
			author_name : $('input[name="author_name"]', form).val(),
			author_email: $('input[name="author_email"]', form).val(),
			content     : this.compress($('textarea[name="content"]', form).val())
		});
	}
	
	Juvia.previewComment = function(formElement) {
		var $container = $(formElement).closest('.juvia-container');
		this.loadScript('/api/preview_comment', {
			site_key : $container.data('site-key'),
			topic_key: $container.data('topic-key'),
			content  : this.compress($('textarea[name="content"]', $container).val())
		});
		return false;
	}
	
	
	Juvia.virtualAnimate = function(options) {
		var options = $.extend({
			duration: 1000
		}, options || {});
		var animation_start = this.now();
		var animation_end = this.now() + options.duration;
		var interval = animation_end - animation_start;
		this._virtualAnimate_step(animation_start, animation_end, interval, options);
	}

	Juvia._virtualAnimate_step = function(animation_start, animation_end, interval, options) {
		var self = this;
		var now = new Date();
		var progress = (now - animation_start) / interval;
		if (progress > 1) {
			progress = 1;
		}
		progress = (1 + Math.sin(-Math.PI / 2 + progress * Math.PI)) / 2;
		options.step(progress);
		if (now < animation_end) {
			setTimeout(function() {
				self._virtualAnimate_step(animation_start,
					animation_end, interval, options);
			}, 15);
		} else {
			options.step(1);
			if (options.finish) {
				options.finish();
			}
		}
	}
	
	Juvia.smoothlyScrollTo = function(top) {
		var self = this;
		var $document = $(document);
		var current = $document.scrollTop();
		this.virtualAnimate({
			duration: 300,
			step: function(x) {
				$document.scrollTop(Math.floor(
					top + (1 - x) * (current - top)
				));
			},
			finish: function() {
				self.setScrollTop(top);
			}
		});
	}
	
	Juvia.setScrollTop = function(top, element) {
		// Browsers don't always scroll properly so work around
		// this with a few timers.
		var self = this;
		element = element || $(document);
		element = $(element);
		element.scrollTop(top);
		setTimeout(function() {
			element.scrollTop(top);
		}, 1);
		setTimeout(function() {
			element.scrollTop(top);
		}, 20);
	}
	
	if (Date.now) {
		Juvia.now = Date.now;
	} else {
		Juvia.now = function() {
			return new Date().getTime();
		}
	}
	
	/** UTF-8 encodes the given string. */
	Juvia.encodeUtf8 = function(string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
		
		for (var n = 0; n < string.length; n++) {
			
			var c = string.charCodeAt(n);
			
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}
		
		return utftext;
	}
	
	/** Casts the given integer as unsigned 32-bit. */
	Juvia.uint32 = function(i) {
		return i >>> 0;
	}
	
	/** Casts the given integer as unsigned 8-bit. */
	Juvia.uint8 = function(i) {
		return i & 0xff;
	}
	
	Juvia.adler32 = function(data) {
		const MOD_ADLER = 65521;
		var a = 1, b = 0;
		var index;
		
		for (index = 0; index < data.length; index++) {
			a = (a + data.charCodeAt(index)) % MOD_ADLER;
			b = (b + a) % MOD_ADLER;
		}
		
		return this.uint32((b << 16) | a);
	}
	
	/** Converts a 32-bit unsigned integer into a 32-bit binary string, big endian encoding. */
	Juvia.uintToBinary = function(i) {
		var buf = [];
		buf[0] = String.fromCharCode(this.uint8((i & 0xff000000) >> 24));
		buf[1] = String.fromCharCode(this.uint8((i & 0xff0000) >> 16));
		buf[2] = String.fromCharCode(this.uint8((i & 0xff00) >> 8));
		buf[3] = String.fromCharCode(this.uint8( i & 0xff ));
		return buf.join('');
	}
	
	Juvia.compress = function(str) {
		if (str.length == 0) {
			return Base64.encode("x\234\003\000\000\000\000\001");
		} else {
			var data = this.encodeUtf8(str);
			data = "\x78\x9c" +
				RawDeflate.deflate(data) +
				this.uintToBinary(this.adler32(data));
			return Base64.encode(data);
		}
	}
	
	
	for (var name in Juvia) {
		if (typeof(Juvia[name]) == 'function') {
			Juvia[name] = $.proxy(Juvia[name], Juvia);
		}
	}
})(Juvia);
